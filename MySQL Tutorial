#set the database you want to query from
USE sql_store;

#SELECT --> FROM --> WHERE --> ORDER BY

#retrieve all columns in the database
SELECT *

#retrieve specific columns
SELECT customer_id, first_name

#specify the table we want to query from
FROM customers

#get specific data
WHERE customer_id = 1

# specify the columns you want to sort by
ORDER BY first_name

#perform an arithmetic expression and it will be a new column
SELECT customer_id, first_name, points, points + 10

#create an alias for a column if using an arithmetic expression so it can be easily understood
SELECT first_name, points, (points + 10) * 100 AS discount_factor

# to get unique results/remove duplicates
SELECT DISTINCT states

#operands (<, >, <=, >=, =, !=, <>)
#enclose string in ' '

#to get all customers who were born after a certain date
WHERE birth_date > '1990-01-01'

WHERE birth_date > '1990-01-01' AND points > 1000
WHERE birth_date > '1990-01-01' OR points > 1000

#multiple arithmetic 
WHERE birth_date > '1990-01-01' AND points > 1000
      state = 'VA'

WHERE NOT birth_date > '1990-01-01' AND points > 1000

# alternative to the OR to combine multiple expressions
WHERE state IN ('VA', 'FL', 'GA')

#have to combine multiple expressions with OR operator because after OR it becomes a string
WHERE state = 'VA' OR state = 'GA' OR state = 'FL'

WHERE points BETWEEN 100 AND 3000

#to get the customers whose last name starts with b and whcih has how ever many characters after the b
WHERE last_name LIKE 'b%'

#to get the customers whose last name has x amount of characters and then ends in a y
WHERE last_name LIKE '_____y'

-- % any number of chaacters
-- _ single character

#to search for specific things
WHERE last_name REGEXP 'field'

#to represent the beginning of a string ^
WHERE last_name REGEXP '^field'

#to represent the end of a string %
WHERE last_name REGEXP 'field$'

#to find multiple things
WHERE last_name REGEXP 'field|mac'

#to find last names that have ge, or ie, or me
WHERE last_name REGEXP '[gim]e'

WHERE last_name REGEXP '[a-h]e'

#search for all customers who don't have a phone value
WHERE phone IS NULL

#design mode to edit table columns etc
#yellow key is primary key column for the table
#can have a composite primary key which contains more than one column

#to order a column in descending fashion
ORDER by first_name DESC

#to sort by multiple columns
ORDER BY state, first_name

#to get only the first 3 customers for example
LIMIT 3

#to skip the first 6 records and then give the next 3 records
LIMIT 6,3

#since the same column is in both tables, must specify which table it will be pulled from, either orders or customers table
SELECT order_id, orders.customer_id, first_name, last_name
FROM orders
JOIN customers
      ON orders.customer_id = customers.customer_id

#can do alias for tables
FROM order o
JOIN customers c

#join two or more tables
SELECT 
      p.date,
      p.invoice_id,
      p.amount,
      c.name,
      pm.name
FROM payments p
JOIN clients c
      ON p.client_id = c.client_id
JOIN payment_methods pm
      ON p.payment_method = pm.payment_method_id

#compound join condition
SELECT *
FROM order_items oi
JOIN order_item_notes oin
      ON oi.order_id = oin.order_id
      AND oi.product_id = oin.product_id
-------
SELECT *
FROM orders o
JOIN customers c
      ON o.customer_id = c.customer_id

#implicit join syntax using the WHERE clause. This is the same as the above.
SELECT *
FROM order o, customers c
WHERE o.customer_id = c.customer_id
------
SELECT 
      c.customer_id,
      c.first_name,
      o.order_id
FROM customers c
JOIN orders o
      ON c.customer_id = o.customer_id
ORDER BY c.customer_id

#outer join... left join 
SELECT 
      c.customer_id,
      c.first_name,
      o.order_id
FROM customers c
LEFT JOIN orders o
      ON c.customer_id = o.customer_id
ORDER BY c.customer_id

#outer join... right join... must switch the order of the tables or else you'll get the same result as a regular join
SELECT 
      c.customer_id,
      c.first_name,
      o.order_id
FROM orders o
RIGHT JOIN customers c
      ON c.customer_id = o.customer_id
ORDER BY c.customer_id

#two outer left join
SELECT 
      c.customer_id,
      c.first_name,
      o.order_id
      sh.name AS shipper
FROM customers c
LEFT JOIN orders o
      ON c.customer_id = o.customer_id
LEFT JOIN orders o
      ON o.shipper_id = sh.shipper_id
ORDER BY c.customer_id

#to make this easier to read 
SELECT *
FROM order_items oi
JOIN order_item_notes oin
      ON oi.order_id = oin.order_id AND
      oi.product_id = oin.product_id

#use the using clause
SELECT *
FROM order_items oi
JOIN order_item_notes oin
      USING (order_id, product_id)

#cross joins to combine evry record from one table to every record in another table
SELECT 
      c.first_name AS customer,
      p.name AS product
FROM customers c
CROSS JOIN products p
ORDER BY c.first_name

#implicit syntax for a cross join
SELECT 
      c.first_name AS customer,
      p.name AS product
FROM customers c, orders o
ORDER BY c.first_name

#unions intro
SELECT 
      order_id,
      order-date,
      'Active' AS status
FROM orders
WHERE order_date >= '2019-01-01'

#return the orders of previous years as archive
SELECT 
      order_id,
      order-date,
      'Archived' AS status
FROM orders
WHERE order_date >= '2019-01-01'

#union is used to combine results from multiple queries
SELECT 
      order_id,
      order-date,
      'Active' AS status
FROM orders
WHERE order_date >= '2019-01-01'
UNION
SELECT 
      order_id,
      order-date,
      'Archived' AS status
FROM orders
WHERE order_date >= '2019-01-01'

#inserting a single row into a table
INSERT INTO customers
VALUES (DEFAULT, 'John', 'Smith', '1990-01-01', NULL, 'address', 'city', 'CA', DEFAULT)

#or alternatively write
INSERT INTO customers (first_name, last_name, birth_date, address. city, state)
VALUES ('John', 'Smith', '199001-01', 'address', 'city', 'state')

#inserting multiple rows 
INSERT INTO shippers (name)
VALUES ('Shipper1'), ('Shipper2'), ('Shipper3')

#inserting hierarchical rows (into multiple tables)
INSERT INTO orders (customer_id, order_date, status)
VALUES (1, '2019-01-02', 1);

INSERT INTO order_items
VALUES 
      (LAST_INSERT_ID(), 1, 1, 2.95),
      (LAST_INSERT_ID(), 1, 1, 3.95)

#creating a copy of a table. the select line a subquery
CREATE TABLE orders_archived AS
SELECT * FROM orders

#to delete all the data in a table click on truncate table

#to copy only a subset of data from a table
INSERT INTO orders_archived
SELECT *
FROM orders
WHERE orders_date < '2019-01-01'

#updating a single row
UPDATE invoices
SET payment_total = 10, payment_date = '2019-03-01'
WHERE invoice_id = 1

#using subqueries in update. this example updates invoices for this one client.
#it will run the query in parentheses to get the client id and then use it in the WHERE clause above it.
UPDATE invoices
SET
      payment_total - invoice_total * 0.5,
      payment_date = due_date
WHERE client_id = 
            (SELECT client_id
            FROM clients
            WHERE name = 'Myworks')

#update invoices for all clients that live in two specific places. use the IN operator to update for multiple records.
UPDATE invoices
SET
      payment_total - invoice_total * 0.5,
      payment_date = due_date
WHERE client_id IN
            (SELECT client_id
            FROM clients
            WHERE state IN ('CA', 'NY')
--------
#to check to make sure you will update the right data. this shows you we only have 2 NULL records.
UPDATE invoices
SET
      payment_total - invoice_total * 0.5,
      payment_date = due_date
SELECT *
FROM invoices
WHERE payment_date IS NULL

#then you can run this
UPDATE invoices
SET
      payment_total - invoice_total * 0.5,
      payment_date = due_date
WHERE payment_date IS NULL
--------
#delete rows
DELETE FROM invoices
WHERE invoice_id = 1

SELECT *
FROM clients
WHERE name = 'Myworks'

DELETE FROM invoices
WHERE client_id = (
      SELECT *
      FROM clients
      WHERE name = 'Myworks')

#restoring databases to original state
-->file menu-->open sql script-->navigate to the directory where you stored the SQL scripts for this course--> open --> execute script -->refresh

